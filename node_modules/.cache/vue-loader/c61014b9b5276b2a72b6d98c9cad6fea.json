{"remainingRequest":"/Users/marcoseiza/LocalDocuments/3152/GraveyardShift/level-editor/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/marcoseiza/LocalDocuments/3152/GraveyardShift/level-editor/src/components/LevelMap.vue?vue&type=style&index=0&id=b4251130&scoped=true&lang=css&","dependencies":[{"path":"/Users/marcoseiza/LocalDocuments/3152/GraveyardShift/level-editor/src/components/LevelMap.vue","mtime":1616642493921},{"path":"/Users/marcoseiza/LocalDocuments/3152/GraveyardShift/level-editor/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/marcoseiza/LocalDocuments/3152/GraveyardShift/level-editor/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/marcoseiza/LocalDocuments/3152/GraveyardShift/level-editor/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/marcoseiza/LocalDocuments/3152/GraveyardShift/level-editor/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/marcoseiza/LocalDocuments/3152/GraveyardShift/level-editor/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5sZXZlbG1hcCB7CiAgbWFyZ2luLXRvcDogMXJlbTsKICBkaXNwbGF5OiBmbGV4OwogIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47CiAgYWxpZ24taXRlbXM6IGNlbnRlcjsKfQoKLnJvdyB7CiAgZGlzcGxheTogZmxleDsKfQoKLmNvbCB7CiAgaGVpZ2h0OiA2MHB4OwogIHdpZHRoOiA2MHB4Owp9CgouZmxvb3IgewogIGJhY2tncm91bmQtaW1hZ2U6IHVybCgifkAvYXNzZXRzL2Zsb29yLnBuZyIpOwp9Cgoud2FsbCB7CiAgYmFja2dyb3VuZC1pbWFnZTogdXJsKCJ+QC9hc3NldHMvd2FsbHRvcC5wbmciKTsKfQoKLmdsYXNzIHsKICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoIn5AL2Fzc2V0cy9nbGFzcy5wbmciKTsKfQoKLmdvYWwgewogIGJhY2tncm91bmQtaW1hZ2U6IHVybCgifkAvYXNzZXRzL2dvYWwucG5nIik7Cn0KCi5pbWFnZSB7CiAgd2lkdGg6IDYwcHg7CiAgaGVpZ2h0OiA2MHB4Owp9CgoucGxheWVyIHsKICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoIn5AL2Fzc2V0cy9wbGF5ZXIucG5nIik7Cn0KCi5tdXRhbnQgewogIGJhY2tncm91bmQtaW1hZ2U6IHVybCgifkAvYXNzZXRzL211dGFudC5wbmciKTsKfQoKLmJyaWNrIHsKICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoIn5AL2Fzc2V0cy9icmljay5wbmciKTsKfQoKLmJvbWIgewogIGJhY2tncm91bmQtaW1hZ2U6IHVybCgifkAvYXNzZXRzL2JvbWIucG5nIik7Cn0K"},{"version":3,"sources":["LevelMap.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+EA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA","file":"LevelMap.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"levelmap\">\n    <div class=\"row\" v-for=\"(row, r) in height\" v-bind:key=\"r\">\n      <div\n        class=\"col\"\n        v-for=\"(col, c) in width\"\n        v-bind:key=\"c\"\n        :class=\"{\n          floor: isTileType(r, c, 'floor') || !isTile(r, c),\n          wall: isTileType(r, c, 'wall'),\n          glass: isTileType(r, c, 'glass'),\n          goal: isTileType(r, c, 'goal'),\n        }\"\n        @click=\"updateTile(r, c)\"\n      >\n        <div\n          v-if=\"!isTile(r, c)\"\n          class=\"image\"\n          :class=\"{\n            player: isTileType(r, c, 'player'),\n            mutant: isTileType(r, c, 'mutant'),\n            bomb: isTileType(r, c, 'bomb'),\n            brick: isTileType(r, c, 'brick'),\n          }\"\n        />\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\n// TODO update with more types as they get added to the game\nconst tileTypes = [\"floor\", \"wall\", \"glass\", \"goal\"];\n\nexport default {\n  props: {\n    height: Number,\n    width: Number,\n    typeToPlace: String,\n  },\n  data() {\n    return {\n      tileTypes: [],\n    };\n  },\n  created() {\n    this.createTileTypes();\n  },\n  methods: {\n    // create the tile type array, default tiles are set to floor\n    createTileTypes() {\n      for (let r = 0; r < this.height; r++) {\n        this.tileTypes.push([]);\n        for (let c = 0; c < this.width; c++) {\n          this.tileTypes[r].push(\"floor\");\n        }\n      }\n      this.$emit(\"tile-changed\", this.tileTypes);\n    },\n    // checks if the tile at r, c is of type type\n    isTileType(r, c, type) {\n      return this.tileTypes[r][c] === type;\n    },\n    // return true if a type is a tile\n    isTile(r, c) {\n      return tileTypes.includes(this.tileTypes[r][c]);\n    },\n    // when clicked, update the tile at r, c to whatever type of tile is being placed\n    updateTile(r, c) {\n      const newRow = this.tileTypes[r].slice(0);\n      newRow[c] = this.typeToPlace;\n      this.$set(this.tileTypes, r, newRow);\n      this.$emit(\"tile-changed\", this.tileTypes);\n    },\n  },\n};\n</script>\n\n<style scoped>\n.levelmap {\n  margin-top: 1rem;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n\n.row {\n  display: flex;\n}\n\n.col {\n  height: 60px;\n  width: 60px;\n}\n\n.floor {\n  background-image: url(\"~@/assets/floor.png\");\n}\n\n.wall {\n  background-image: url(\"~@/assets/walltop.png\");\n}\n\n.glass {\n  background-image: url(\"~@/assets/glass.png\");\n}\n\n.goal {\n  background-image: url(\"~@/assets/goal.png\");\n}\n\n.image {\n  width: 60px;\n  height: 60px;\n}\n\n.player {\n  background-image: url(\"~@/assets/player.png\");\n}\n\n.mutant {\n  background-image: url(\"~@/assets/mutant.png\");\n}\n\n.brick {\n  background-image: url(\"~@/assets/brick.png\");\n}\n\n.bomb {\n  background-image: url(\"~@/assets/bomb.png\");\n}\n</style>\n"]}]}