{"remainingRequest":"/Users/marcoseiza/LocalDocuments/3152/GraveyardShift/level-editor/node_modules/babel-loader/lib/index.js!/Users/marcoseiza/LocalDocuments/3152/GraveyardShift/level-editor/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/marcoseiza/LocalDocuments/3152/GraveyardShift/level-editor/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/marcoseiza/LocalDocuments/3152/GraveyardShift/level-editor/src/components/Dashboard.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/marcoseiza/LocalDocuments/3152/GraveyardShift/level-editor/src/components/Dashboard.vue","mtime":1616642493920},{"path":"/Users/marcoseiza/LocalDocuments/3152/GraveyardShift/level-editor/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/marcoseiza/LocalDocuments/3152/GraveyardShift/level-editor/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/marcoseiza/LocalDocuments/3152/GraveyardShift/level-editor/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/marcoseiza/LocalDocuments/3152/GraveyardShift/level-editor/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLmNvbnN0cnVjdG9yLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLnVybC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmcuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuaXRlcmF0b3IuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLml0ZXJhdG9yLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuam9pbi5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuZm9yLWVhY2guanMiOwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwppbXBvcnQgTGV2ZWxNYXAgZnJvbSAiQC9jb21wb25lbnRzL0xldmVsTWFwLnZ1ZSI7CmltcG9ydCBUb29sQmFyIGZyb20gIkAvY29tcG9uZW50cy9Ub29sQmFyLnZ1ZSI7IC8vIFVQREFURSBUSEUgVkVSU0lPTiBOVU1CRVIgV0hFTiBUSEUgSlNPTiBDSEFOR0VTCi8vIFRPRE8gLSBjb252ZXJ0IG9sZCB2ZXJzaW9ucyB0byBuZXcgdmVyc2lvbnMgc29tZWhvdwoKdmFyIHZlcnNpb25OdW1iZXIgPSAiMS4wIjsKZXhwb3J0IGRlZmF1bHQgewogIGNvbXBvbmVudHM6IHsKICAgIExldmVsTWFwOiBMZXZlbE1hcCwKICAgIFRvb2xCYXI6IFRvb2xCYXIKICB9LAogIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICB3aWR0aDogMCwKICAgICAgaGVpZ2h0OiAwLAogICAgICByb3dzOiAiIiwKICAgICAgY29sczogIiIsCiAgICAgIGxldmVsTnVtYmVyOiAwLAogICAgICBkaW1lbnNpb25zU2V0OiBmYWxzZSwKICAgICAgdHlwZVBsYWNpbmc6ICJmbG9vciIsCiAgICAgIHRpbGVzOiBbXQogICAgfTsKICB9LAogIG1ldGhvZHM6IHsKICAgIC8vIHVwZGF0ZSB0aGUgYm9hcmQgZGltZW5zaW9ucyBvbiBidXR0b24gY2xpY2sKICAgIHVwZGF0ZURpbWVuc2lvbnM6IGZ1bmN0aW9uIHVwZGF0ZURpbWVuc2lvbnMoKSB7CiAgICAgIHRoaXMud2lkdGggPSBOdW1iZXIodGhpcy5jb2xzKTsKICAgICAgdGhpcy5oZWlnaHQgPSBOdW1iZXIodGhpcy5yb3dzKTsKICAgICAgdGhpcy5kaW1lbnNpb25zU2V0ID0gdHJ1ZTsKICAgIH0sCiAgICAvLyB3aGVuIHRoZSB0aWxlcyBhcmUgdXBkYXRlZCBpbiBMZXZlbE1hcCwgdXBkYXRlIHRoZW0gaW4gRGFzaGJvYXJkIGZvciBKU09OIHB1cnBvc2VzCiAgICB1cGRhdGVUaWxlczogZnVuY3Rpb24gdXBkYXRlVGlsZXModGlsZXMpIHsKICAgICAgdGhpcy50aWxlcyA9IHRpbGVzOwogICAgICBjb25zb2xlLmxvZyh0aGlzLnRpbGVzKTsKICAgIH0sCiAgICAvLyB1cGRhdGUgdGhlIHRpbGUgYmVpbmcgcGxhY2VkIHdoZW4gYSBidXR0b24gaXMgY2xpY2tlZCBvbiBpbiBUb29sQmFyCiAgICB1cGRhdGVUaWxlUGxhY2luZzogZnVuY3Rpb24gdXBkYXRlVGlsZVBsYWNpbmcodHlwZSkgewogICAgICB0aGlzLnR5cGVQbGFjaW5nID0gdHlwZTsKICAgIH0sCiAgICAvLyBjcmVhdGUgdGhlIGpzb24gYmFzZWQgb24gdGhlIG1hcCBhbmQgY2FsbCB0aGUgb3V0cHV0IG1ldGhvZAogICAgd3JpdGVKU09OOiBmdW5jdGlvbiB3cml0ZUpTT04oKSB7CiAgICAgIC8vIFRPRE8gLSByZW1vdmUgaGFyZGNvZGVkIHZhbHVlcwogICAgICB2YXIganNvbiA9IHt9OwogICAgICBqc29uWyJ2ZXJzaW9uIl0gPSB2ZXJzaW9uTnVtYmVyOwogICAgICB2YXIgbXV0YW50U3Bhd25zID0gdGhpcy5maW5kT2JqZWN0cygibXV0YW50Iik7CiAgICAgIHZhciBicmlja1NwYXducyA9IHRoaXMuZmluZE9iamVjdHMoImJyaWNrIik7CiAgICAgIHZhciBib21iU3Bhd25zID0gdGhpcy5maW5kT2JqZWN0cygiYm9tYiIpOwogICAgICB2YXIgaXRlbVNwYXducyA9IHRoaXMuZ2VuZXJhdGVJdGVtU3Bhd25zKGJyaWNrU3Bhd25zLCBib21iU3Bhd25zKTsgLy8gc2V0IG1ldGFkYXRhCgogICAgICB2YXIgbWV0YWRhdGEgPSB7CiAgICAgICAgd2lkdGg6IHRoaXMud2lkdGgsCiAgICAgICAgaGVpZ2h0OiB0aGlzLmhlaWdodCwKICAgICAgICAicGxheWVyLXNwYXduIjogdGhpcy5maW5kUGxheWVyKCksCiAgICAgICAgIm11dGFudC1jb3VudCI6IG11dGFudFNwYXducy5sZW5ndGgsCiAgICAgICAgIm11dGFudC1zcGF3bnMiOiBtdXRhbnRTcGF3bnMsCiAgICAgICAgIml0ZW0tY291bnQiOiBicmlja1NwYXducy5sZW5ndGggKyBib21iU3Bhd25zLmxlbmd0aCwKICAgICAgICAiaXRlbS1zcGF3bnMiOiBpdGVtU3Bhd25zCiAgICAgIH07CiAgICAgIGpzb25bIm1ldGFkYXRhIl0gPSBtZXRhZGF0YTsgLy8gc2V0IGxheW91dAoKICAgICAgdmFyIGxheW91dCA9IFtdOwoKICAgICAgZm9yICh2YXIgciA9IHRoaXMuaGVpZ2h0IC0gMTsgciA+PSAwOyByLS0pIHsKICAgICAgICBmb3IgKHZhciBjID0gMDsgYyA8IHRoaXMud2lkdGg7IGMrKykgewogICAgICAgICAgaWYgKHRoaXMudGlsZXNbcl1bY10gPT09ICJ3YWxsIikgewogICAgICAgICAgICBsYXlvdXQucHVzaCgxKTsKICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy50aWxlc1tyXVtjXSA9PT0gImdsYXNzIikgewogICAgICAgICAgICBsYXlvdXQucHVzaCgyKTsKICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy50aWxlc1tyXVtjXSA9PT0gImdvYWwiKSB7CiAgICAgICAgICAgIGxheW91dC5wdXNoKDQpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgbGF5b3V0LnB1c2goMCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CgogICAgICBqc29uWyJsYXlvdXQiXSA9IGxheW91dDsKICAgICAgY29uc29sZS5sb2coanNvbik7CiAgICAgIHRoaXMub3V0cHV0SlNPTlRvRmlsZShqc29uKTsKICAgIH0sCiAgICAvLyBvdXRwdXQganNvbiB0byBhIGZpbGUgd2l0aCBwcm92aWRlZCBsZXZlbCBudW1iZXIgYW5kIGF1dG9tYXRpY2FsbHkgZG93bmxvYWQgaXQgdG8gdGhlIHVzZXIncyBjb21wdXRlcgogICAgb3V0cHV0SlNPTlRvRmlsZTogZnVuY3Rpb24gb3V0cHV0SlNPTlRvRmlsZShqc29uKSB7CiAgICAgIC8vIGNvZGUgc291cmNlOiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy80ODYxMTY3MS92dWUtanMtd3JpdGUtanNvbi1vYmplY3QtdG8tbG9jYWwtZmlsZQogICAgICB2YXIgZGF0YSA9IEpTT04uc3RyaW5naWZ5KGpzb24pOwogICAgICB2YXIgYmxvYiA9IG5ldyBCbG9iKFtkYXRhXSwgewogICAgICAgIHR5cGU6ICJ0ZXh0L3BsYWluIgogICAgICB9KTsKICAgICAgdmFyIGUgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgiTW91c2VFdmVudHMiKSwKICAgICAgICAgIGEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJhIik7CiAgICAgIGEuZG93bmxvYWQgPSAibGV2ZWwiICsgdGhpcy5sZXZlbE51bWJlciArICIuanNvbiI7CiAgICAgIGEuaHJlZiA9IHdpbmRvdy5VUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpOwogICAgICBhLmRhdGFzZXQuZG93bmxvYWR1cmwgPSBbInRleHQvanNvbiIsIGEuZG93bmxvYWQsIGEuaHJlZl0uam9pbigiOiIpOwogICAgICBlLmluaXRFdmVudCgiY2xpY2siLCB0cnVlLCBmYWxzZSwgd2luZG93LCAwLCAwLCAwLCAwLCAwLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMCwgbnVsbCk7CiAgICAgIGEuZGlzcGF0Y2hFdmVudChlKTsKICAgIH0sCiAgICAvLyByZXR1cm5zIHRoZSBsb2NhdGlvbiBvZiB0aGUgcGxheWVyLCBvciBhbiBlbXB0eSBhcnJheSBpZiBub3QgZm91bmQKICAgIC8vIFRPRE8gLSBzaG91bGQgd2UgcmVxdWlyZSBhIHBsYXllciB0byBleGlzdAogICAgLy8gVE9ETyAtIGFkZGVkIHRyYW5zZm9ybXMgdG8gaGVyZSBhbmQgb3RoZXIgbWV0aG9kcyB0byBtYXRjaCBqc29uLCBtYXliZSBqc29uIGZpbGUgc2hvdWxkIGJlIGNoYW5nZWQKICAgIGZpbmRQbGF5ZXI6IGZ1bmN0aW9uIGZpbmRQbGF5ZXIoKSB7CiAgICAgIGZvciAodmFyIHIgPSAwOyByIDwgdGhpcy5oZWlnaHQ7IHIrKykgewogICAgICAgIGZvciAodmFyIGMgPSAwOyBjIDwgdGhpcy53aWR0aDsgYysrKSB7CiAgICAgICAgICBpZiAodGhpcy50aWxlc1tyXVtjXSA9PT0gInBsYXllciIpIHsKICAgICAgICAgICAgcmV0dXJuIFtjLCB0aGlzLmhlaWdodCAtIHIgLSAxXTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KCiAgICAgIHJldHVybiBbXTsKICAgIH0sCiAgICAvLyByZXR1cm5zIGEgMmQgYXJyYXkgcmVwcmVzZW50aW5nIGFsbCBwb3NpdGlvbnMgb2Ygb2JqZWN0VHlwZQogICAgLy8gdXNlZCB0byBmaW5kIG11dGFudHMsIGJvbWJzLCBicmlja3MsIGV0Yy4KICAgIGZpbmRPYmplY3RzOiBmdW5jdGlvbiBmaW5kT2JqZWN0cyhvYmplY3RUeXBlKSB7CiAgICAgIHZhciBvYmplY3RMaXN0ID0gW107CgogICAgICBmb3IgKHZhciByID0gMDsgciA8IHRoaXMuaGVpZ2h0OyByKyspIHsKICAgICAgICBmb3IgKHZhciBjID0gMDsgYyA8IHRoaXMud2lkdGg7IGMrKykgewogICAgICAgICAgaWYgKHRoaXMudGlsZXNbcl1bY10gPT09IG9iamVjdFR5cGUpIHsKICAgICAgICAgICAgb2JqZWN0TGlzdC5wdXNoKFtjLCB0aGlzLmhlaWdodCAtIHIgLSAxXSk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CgogICAgICByZXR1cm4gb2JqZWN0TGlzdDsKICAgIH0sCiAgICAvLyByZXR1cm5zIHRoZSBqc29uIHJlcHJlc2VudGF0aW9uIG9mIGFsbCB0aGUgaXRlbSB0eXBlcyBhbmQgdGhlaXIgbG9jYXRpb25zCiAgICBnZW5lcmF0ZUl0ZW1TcGF3bnM6IGZ1bmN0aW9uIGdlbmVyYXRlSXRlbVNwYXducyhicmlja3MsIGJvbWJzKSB7CiAgICAgIHZhciBpdGVtU3Bhd25zID0gW107CiAgICAgIGJyaWNrcy5mb3JFYWNoKGZ1bmN0aW9uIChiKSB7CiAgICAgICAgdmFyIGl0ZW0gPSB7fTsKICAgICAgICBpdGVtLnR5cGUgPSAiQlJJQ0siOwogICAgICAgIGl0ZW0ucG9zaXRpb24gPSBiOwogICAgICAgIGl0ZW1TcGF3bnMucHVzaChpdGVtKTsKICAgICAgfSk7CiAgICAgIGJvbWJzLmZvckVhY2goZnVuY3Rpb24gKGIpIHsKICAgICAgICB2YXIgaXRlbSA9IHt9OwogICAgICAgIGl0ZW0udHlwZSA9ICJCT01CIjsKICAgICAgICBpdGVtLnBvc2l0aW9uID0gYjsKICAgICAgICBpdGVtU3Bhd25zLnB1c2goaXRlbSk7CiAgICAgIH0pOwogICAgICByZXR1cm4gaXRlbVNwYXduczsKICAgIH0KICB9Cn07"},{"version":3,"sources":["Dashboard.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoDA,OAAA,QAAA,MAAA,2BAAA;AACA,OAAA,OAAA,MAAA,0BAAA,C,CAEA;AACA;;AACA,IAAA,aAAA,GAAA,KAAA;AAEA,eAAA;AACA,EAAA,UAAA,EAAA;AAAA,IAAA,QAAA,EAAA,QAAA;AAAA,IAAA,OAAA,EAAA;AAAA,GADA;AAEA,EAAA,IAFA,kBAEA;AACA,WAAA;AACA,MAAA,KAAA,EAAA,CADA;AAEA,MAAA,MAAA,EAAA,CAFA;AAGA,MAAA,IAAA,EAAA,EAHA;AAIA,MAAA,IAAA,EAAA,EAJA;AAKA,MAAA,WAAA,EAAA,CALA;AAMA,MAAA,aAAA,EAAA,KANA;AAOA,MAAA,WAAA,EAAA,OAPA;AAQA,MAAA,KAAA,EAAA;AARA,KAAA;AAUA,GAbA;AAcA,EAAA,OAAA,EAAA;AACA;AACA,IAAA,gBAFA,8BAEA;AACA,WAAA,KAAA,GAAA,MAAA,CAAA,KAAA,IAAA,CAAA;AACA,WAAA,MAAA,GAAA,MAAA,CAAA,KAAA,IAAA,CAAA;AACA,WAAA,aAAA,GAAA,IAAA;AACA,KANA;AAOA;AACA,IAAA,WARA,uBAQA,KARA,EAQA;AACA,WAAA,KAAA,GAAA,KAAA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,KAAA,KAAA;AACA,KAXA;AAYA;AACA,IAAA,iBAbA,6BAaA,IAbA,EAaA;AACA,WAAA,WAAA,GAAA,IAAA;AACA,KAfA;AAgBA;AACA,IAAA,SAjBA,uBAiBA;AACA;AACA,UAAA,IAAA,GAAA,EAAA;AACA,MAAA,IAAA,CAAA,SAAA,CAAA,GAAA,aAAA;AAEA,UAAA,YAAA,GAAA,KAAA,WAAA,CAAA,QAAA,CAAA;AACA,UAAA,WAAA,GAAA,KAAA,WAAA,CAAA,OAAA,CAAA;AACA,UAAA,UAAA,GAAA,KAAA,WAAA,CAAA,MAAA,CAAA;AACA,UAAA,UAAA,GAAA,KAAA,kBAAA,CAAA,WAAA,EAAA,UAAA,CAAA,CARA,CAUA;;AACA,UAAA,QAAA,GAAA;AACA,QAAA,KAAA,EAAA,KAAA,KADA;AAEA,QAAA,MAAA,EAAA,KAAA,MAFA;AAGA,wBAAA,KAAA,UAAA,EAHA;AAIA,wBAAA,YAAA,CAAA,MAJA;AAKA,yBAAA,YALA;AAMA,sBAAA,WAAA,CAAA,MAAA,GAAA,UAAA,CAAA,MANA;AAOA,uBAAA;AAPA,OAAA;AASA,MAAA,IAAA,CAAA,UAAA,CAAA,GAAA,QAAA,CApBA,CAsBA;;AACA,UAAA,MAAA,GAAA,EAAA;;AACA,WAAA,IAAA,CAAA,GAAA,KAAA,MAAA,GAAA,CAAA,EAAA,CAAA,IAAA,CAAA,EAAA,CAAA,EAAA,EAAA;AACA,aAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,KAAA,KAAA,EAAA,CAAA,EAAA,EAAA;AACA,cAAA,KAAA,KAAA,CAAA,CAAA,EAAA,CAAA,MAAA,MAAA,EAAA;AACA,YAAA,MAAA,CAAA,IAAA,CAAA,CAAA;AACA,WAFA,MAEA,IAAA,KAAA,KAAA,CAAA,CAAA,EAAA,CAAA,MAAA,OAAA,EAAA;AACA,YAAA,MAAA,CAAA,IAAA,CAAA,CAAA;AACA,WAFA,MAEA,IAAA,KAAA,KAAA,CAAA,CAAA,EAAA,CAAA,MAAA,MAAA,EAAA;AACA,YAAA,MAAA,CAAA,IAAA,CAAA,CAAA;AACA,WAFA,MAEA;AACA,YAAA,MAAA,CAAA,IAAA,CAAA,CAAA;AACA;AACA;AACA;;AACA,MAAA,IAAA,CAAA,QAAA,CAAA,GAAA,MAAA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,IAAA;AAEA,WAAA,gBAAA,CAAA,IAAA;AACA,KA1DA;AA2DA;AACA,IAAA,gBA5DA,4BA4DA,IA5DA,EA4DA;AACA;AACA,UAAA,IAAA,GAAA,IAAA,CAAA,SAAA,CAAA,IAAA,CAAA;AACA,UAAA,IAAA,GAAA,IAAA,IAAA,CAAA,CAAA,IAAA,CAAA,EAAA;AAAA,QAAA,IAAA,EAAA;AAAA,OAAA,CAAA;AACA,UAAA,CAAA,GAAA,QAAA,CAAA,WAAA,CAAA,aAAA,CAAA;AAAA,UACA,CAAA,GAAA,QAAA,CAAA,aAAA,CAAA,GAAA,CADA;AAEA,MAAA,CAAA,CAAA,QAAA,GAAA,UAAA,KAAA,WAAA,GAAA,OAAA;AACA,MAAA,CAAA,CAAA,IAAA,GAAA,MAAA,CAAA,GAAA,CAAA,eAAA,CAAA,IAAA,CAAA;AACA,MAAA,CAAA,CAAA,OAAA,CAAA,WAAA,GAAA,CAAA,WAAA,EAAA,CAAA,CAAA,QAAA,EAAA,CAAA,CAAA,IAAA,EAAA,IAAA,CAAA,GAAA,CAAA;AACA,MAAA,CAAA,CAAA,SAAA,CACA,OADA,EAEA,IAFA,EAGA,KAHA,EAIA,MAJA,EAKA,CALA,EAMA,CANA,EAOA,CAPA,EAQA,CARA,EASA,CATA,EAUA,KAVA,EAWA,KAXA,EAYA,KAZA,EAaA,KAbA,EAcA,CAdA,EAeA,IAfA;AAiBA,MAAA,CAAA,CAAA,aAAA,CAAA,CAAA;AACA,KAvFA;AAwFA;AACA;AACA;AACA,IAAA,UA3FA,wBA2FA;AACA,WAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,KAAA,MAAA,EAAA,CAAA,EAAA,EAAA;AACA,aAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,KAAA,KAAA,EAAA,CAAA,EAAA,EAAA;AACA,cAAA,KAAA,KAAA,CAAA,CAAA,EAAA,CAAA,MAAA,QAAA,EAAA;AACA,mBAAA,CAAA,CAAA,EAAA,KAAA,MAAA,GAAA,CAAA,GAAA,CAAA,CAAA;AACA;AACA;AACA;;AACA,aAAA,EAAA;AACA,KApGA;AAqGA;AACA;AACA,IAAA,WAvGA,uBAuGA,UAvGA,EAuGA;AACA,UAAA,UAAA,GAAA,EAAA;;AACA,WAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,KAAA,MAAA,EAAA,CAAA,EAAA,EAAA;AACA,aAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,KAAA,KAAA,EAAA,CAAA,EAAA,EAAA;AACA,cAAA,KAAA,KAAA,CAAA,CAAA,EAAA,CAAA,MAAA,UAAA,EAAA;AACA,YAAA,UAAA,CAAA,IAAA,CAAA,CAAA,CAAA,EAAA,KAAA,MAAA,GAAA,CAAA,GAAA,CAAA,CAAA;AACA;AACA;AACA;;AACA,aAAA,UAAA;AACA,KAjHA;AAkHA;AACA,IAAA,kBAnHA,8BAmHA,MAnHA,EAmHA,KAnHA,EAmHA;AACA,UAAA,UAAA,GAAA,EAAA;AACA,MAAA,MAAA,CAAA,OAAA,CAAA,UAAA,CAAA,EAAA;AACA,YAAA,IAAA,GAAA,EAAA;AACA,QAAA,IAAA,CAAA,IAAA,GAAA,OAAA;AACA,QAAA,IAAA,CAAA,QAAA,GAAA,CAAA;AACA,QAAA,UAAA,CAAA,IAAA,CAAA,IAAA;AACA,OALA;AAOA,MAAA,KAAA,CAAA,OAAA,CAAA,UAAA,CAAA,EAAA;AACA,YAAA,IAAA,GAAA,EAAA;AACA,QAAA,IAAA,CAAA,IAAA,GAAA,MAAA;AACA,QAAA,IAAA,CAAA,QAAA,GAAA,CAAA;AACA,QAAA,UAAA,CAAA,IAAA,CAAA,IAAA;AACA,OALA;AAOA,aAAA,UAAA;AACA;AApIA;AAdA,CAAA","sourcesContent":["<template>\n  <div class=\"dashboard\">\n    <h1>Level Editor</h1>\n    <div class=\"sizeWrapper\">\n      <span>What size should the level be (in tiles, width x height)?</span>\n      <div class=\"sizeInputs\">\n        <input class=\"input\" v-model=\"cols\" /> x\n        <input class=\"input\" v-model=\"rows\" />\n      </div>\n      <button class=\"button\" @click=\"updateDimensions\">Create Map</button>\n    </div>\n    <div class=\"toolsAndMapWrapper\" v-if=\"dimensionsSet\">\n      <tool-bar @update-tile-placing=\"updateTilePlacing\" />\n      <level-map\n        :height=\"height\"\n        :width=\"width\"\n        :typeToPlace=\"typePlacing\"\n        @tile-changed=\"updateTiles\"\n      />\n    </div>\n    <div v-if=\"dimensionsSet\" class=\"outputWrapper\">\n      <span>Level Number:</span>\n      <input class=\"input\" v-model=\"levelNumber\" />\n      <button @click=\"writeJSON\">Output File</button>\n      <div class=\"instructions\">\n        <h3 class=\"instructionsTitle\">\n          Instructions For Downloading and Playing the Level\n        </h3>\n        <ol class=\"instructionsList\">\n          <li>\n            Set the level number as 1 + the current max level in the codebase.\n          </li>\n          <li>\n            After downloading, add the level to /core/assets/levels/\n          </li>\n          <li>\n            Set the maxLevels variable in GameplayController to this level\n            number.\n          </li>\n          <li>\n            Add an import for this new JSON file in /core/assets/assets.json\n          </li>\n          <li>\n            After all of this, the level should be playable!\n          </li>\n        </ol>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport LevelMap from \"@/components/LevelMap.vue\";\nimport ToolBar from \"@/components/ToolBar.vue\";\n\n// UPDATE THE VERSION NUMBER WHEN THE JSON CHANGES\n// TODO - convert old versions to new versions somehow\nconst versionNumber = \"1.0\";\n\nexport default {\n  components: { LevelMap, ToolBar },\n  data() {\n    return {\n      width: 0,\n      height: 0,\n      rows: \"\",\n      cols: \"\",\n      levelNumber: 0,\n      dimensionsSet: false,\n      typePlacing: \"floor\",\n      tiles: [],\n    };\n  },\n  methods: {\n    // update the board dimensions on button click\n    updateDimensions() {\n      this.width = Number(this.cols);\n      this.height = Number(this.rows);\n      this.dimensionsSet = true;\n    },\n    // when the tiles are updated in LevelMap, update them in Dashboard for JSON purposes\n    updateTiles(tiles) {\n      this.tiles = tiles;\n      console.log(this.tiles);\n    },\n    // update the tile being placed when a button is clicked on in ToolBar\n    updateTilePlacing(type) {\n      this.typePlacing = type;\n    },\n    // create the json based on the map and call the output method\n    writeJSON() {\n      // TODO - remove hardcoded values\n      let json = {};\n      json[\"version\"] = versionNumber;\n\n      let mutantSpawns = this.findObjects(\"mutant\");\n      let brickSpawns = this.findObjects(\"brick\");\n      let bombSpawns = this.findObjects(\"bomb\");\n      let itemSpawns = this.generateItemSpawns(brickSpawns, bombSpawns);\n\n      // set metadata\n      let metadata = {\n        width: this.width,\n        height: this.height,\n        \"player-spawn\": this.findPlayer(),\n        \"mutant-count\": mutantSpawns.length,\n        \"mutant-spawns\": mutantSpawns,\n        \"item-count\": brickSpawns.length + bombSpawns.length,\n        \"item-spawns\": itemSpawns,\n      };\n      json[\"metadata\"] = metadata;\n\n      // set layout\n      let layout = [];\n      for (let r = this.height - 1; r >= 0; r--) {\n        for (let c = 0; c < this.width; c++) {\n          if (this.tiles[r][c] === \"wall\") {\n            layout.push(1);\n          } else if (this.tiles[r][c] === \"glass\") {\n            layout.push(2);\n          } else if (this.tiles[r][c] === \"goal\") {\n            layout.push(4);\n          } else {\n            layout.push(0);\n          }\n        }\n      }\n      json[\"layout\"] = layout;\n      console.log(json);\n\n      this.outputJSONToFile(json);\n    },\n    // output json to a file with provided level number and automatically download it to the user's computer\n    outputJSONToFile(json) {\n      // code source: https://stackoverflow.com/questions/48611671/vue-js-write-json-object-to-local-file\n      const data = JSON.stringify(json);\n      const blob = new Blob([data], { type: \"text/plain\" });\n      const e = document.createEvent(\"MouseEvents\"),\n        a = document.createElement(\"a\");\n      a.download = \"level\" + this.levelNumber + \".json\";\n      a.href = window.URL.createObjectURL(blob);\n      a.dataset.downloadurl = [\"text/json\", a.download, a.href].join(\":\");\n      e.initEvent(\n        \"click\",\n        true,\n        false,\n        window,\n        0,\n        0,\n        0,\n        0,\n        0,\n        false,\n        false,\n        false,\n        false,\n        0,\n        null\n      );\n      a.dispatchEvent(e);\n    },\n    // returns the location of the player, or an empty array if not found\n    // TODO - should we require a player to exist\n    // TODO - added transforms to here and other methods to match json, maybe json file should be changed\n    findPlayer() {\n      for (let r = 0; r < this.height; r++) {\n        for (let c = 0; c < this.width; c++) {\n          if (this.tiles[r][c] === \"player\") {\n            return [c, this.height - r - 1];\n          }\n        }\n      }\n      return [];\n    },\n    // returns a 2d array representing all positions of objectType\n    // used to find mutants, bombs, bricks, etc.\n    findObjects(objectType) {\n      let objectList = [];\n      for (let r = 0; r < this.height; r++) {\n        for (let c = 0; c < this.width; c++) {\n          if (this.tiles[r][c] === objectType) {\n            objectList.push([c, this.height - r - 1]);\n          }\n        }\n      }\n      return objectList;\n    },\n    // returns the json representation of all the item types and their locations\n    generateItemSpawns(bricks, bombs) {\n      let itemSpawns = [];\n      bricks.forEach((b) => {\n        let item = {};\n        item.type = \"BRICK\";\n        item.position = b;\n        itemSpawns.push(item);\n      });\n\n      bombs.forEach((b) => {\n        let item = {};\n        item.type = \"BOMB\";\n        item.position = b;\n        itemSpawns.push(item);\n      });\n\n      return itemSpawns;\n    },\n  },\n};\n</script>\n\n<style scoped>\n.sizeWrapper {\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  margin-left: auto;\n  margin-right: auto;\n}\n\n.sizeInputs {\n  margin-top: 0.5rem;\n  display: flex;\n}\n\n.input {\n  max-width: 2rem;\n  margin: 0 0.5rem;\n}\n\n.button {\n  margin-top: 0.5rem;\n}\n\n.toolsAndMapWrapper {\n  display: flex;\n  justify-content: center;\n}\n\n.outputWrapper {\n  margin-top: 1rem;\n}\n\n.instructions {\n  display: flex;\n  flex-direction: column;\n  justify-content: left;\n  text-align: left;\n}\n\n.instructionsTitle {\n  margin-bottom: 0;\n  margin-top: 2rem;\n}\n</style>\n"],"sourceRoot":"src/components"}]}