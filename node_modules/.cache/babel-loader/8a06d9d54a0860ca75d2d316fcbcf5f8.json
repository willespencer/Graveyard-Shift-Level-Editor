{"remainingRequest":"/Users/marcoseiza/LocalDocuments/3152/GraveyardShift/level-editor/node_modules/babel-loader/lib/index.js!/Users/marcoseiza/LocalDocuments/3152/GraveyardShift/level-editor/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/marcoseiza/LocalDocuments/3152/GraveyardShift/level-editor/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/marcoseiza/LocalDocuments/3152/GraveyardShift/level-editor/src/components/LevelMap.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/marcoseiza/LocalDocuments/3152/GraveyardShift/level-editor/src/components/LevelMap.vue","mtime":1616642493921},{"path":"/Users/marcoseiza/LocalDocuments/3152/GraveyardShift/level-editor/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/marcoseiza/LocalDocuments/3152/GraveyardShift/level-editor/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/marcoseiza/LocalDocuments/3152/GraveyardShift/level-editor/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/marcoseiza/LocalDocuments/3152/GraveyardShift/level-editor/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLmNvbnN0cnVjdG9yLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuaW5jbHVkZXMuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5zbGljZS5qcyI7Ci8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vIFRPRE8gdXBkYXRlIHdpdGggbW9yZSB0eXBlcyBhcyB0aGV5IGdldCBhZGRlZCB0byB0aGUgZ2FtZQp2YXIgdGlsZVR5cGVzID0gWyJmbG9vciIsICJ3YWxsIiwgImdsYXNzIiwgImdvYWwiXTsKZXhwb3J0IGRlZmF1bHQgewogIHByb3BzOiB7CiAgICBoZWlnaHQ6IE51bWJlciwKICAgIHdpZHRoOiBOdW1iZXIsCiAgICB0eXBlVG9QbGFjZTogU3RyaW5nCiAgfSwKICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgdGlsZVR5cGVzOiBbXQogICAgfTsKICB9LAogIGNyZWF0ZWQ6IGZ1bmN0aW9uIGNyZWF0ZWQoKSB7CiAgICB0aGlzLmNyZWF0ZVRpbGVUeXBlcygpOwogIH0sCiAgbWV0aG9kczogewogICAgLy8gY3JlYXRlIHRoZSB0aWxlIHR5cGUgYXJyYXksIGRlZmF1bHQgdGlsZXMgYXJlIHNldCB0byBmbG9vcgogICAgY3JlYXRlVGlsZVR5cGVzOiBmdW5jdGlvbiBjcmVhdGVUaWxlVHlwZXMoKSB7CiAgICAgIGZvciAodmFyIHIgPSAwOyByIDwgdGhpcy5oZWlnaHQ7IHIrKykgewogICAgICAgIHRoaXMudGlsZVR5cGVzLnB1c2goW10pOwoKICAgICAgICBmb3IgKHZhciBjID0gMDsgYyA8IHRoaXMud2lkdGg7IGMrKykgewogICAgICAgICAgdGhpcy50aWxlVHlwZXNbcl0ucHVzaCgiZmxvb3IiKTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIHRoaXMuJGVtaXQoInRpbGUtY2hhbmdlZCIsIHRoaXMudGlsZVR5cGVzKTsKICAgIH0sCiAgICAvLyBjaGVja3MgaWYgdGhlIHRpbGUgYXQgciwgYyBpcyBvZiB0eXBlIHR5cGUKICAgIGlzVGlsZVR5cGU6IGZ1bmN0aW9uIGlzVGlsZVR5cGUociwgYywgdHlwZSkgewogICAgICByZXR1cm4gdGhpcy50aWxlVHlwZXNbcl1bY10gPT09IHR5cGU7CiAgICB9LAogICAgLy8gcmV0dXJuIHRydWUgaWYgYSB0eXBlIGlzIGEgdGlsZQogICAgaXNUaWxlOiBmdW5jdGlvbiBpc1RpbGUociwgYykgewogICAgICByZXR1cm4gdGlsZVR5cGVzLmluY2x1ZGVzKHRoaXMudGlsZVR5cGVzW3JdW2NdKTsKICAgIH0sCiAgICAvLyB3aGVuIGNsaWNrZWQsIHVwZGF0ZSB0aGUgdGlsZSBhdCByLCBjIHRvIHdoYXRldmVyIHR5cGUgb2YgdGlsZSBpcyBiZWluZyBwbGFjZWQKICAgIHVwZGF0ZVRpbGU6IGZ1bmN0aW9uIHVwZGF0ZVRpbGUociwgYykgewogICAgICB2YXIgbmV3Um93ID0gdGhpcy50aWxlVHlwZXNbcl0uc2xpY2UoMCk7CiAgICAgIG5ld1Jvd1tjXSA9IHRoaXMudHlwZVRvUGxhY2U7CiAgICAgIHRoaXMuJHNldCh0aGlzLnRpbGVUeXBlcywgciwgbmV3Um93KTsKICAgICAgdGhpcy4kZW1pdCgidGlsZS1jaGFuZ2VkIiwgdGhpcy50aWxlVHlwZXMpOwogICAgfQogIH0KfTs="},{"version":3,"sources":["LevelMap.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA;AACA,IAAA,SAAA,GAAA,CAAA,OAAA,EAAA,MAAA,EAAA,OAAA,EAAA,MAAA,CAAA;AAEA,eAAA;AACA,EAAA,KAAA,EAAA;AACA,IAAA,MAAA,EAAA,MADA;AAEA,IAAA,KAAA,EAAA,MAFA;AAGA,IAAA,WAAA,EAAA;AAHA,GADA;AAMA,EAAA,IANA,kBAMA;AACA,WAAA;AACA,MAAA,SAAA,EAAA;AADA,KAAA;AAGA,GAVA;AAWA,EAAA,OAXA,qBAWA;AACA,SAAA,eAAA;AACA,GAbA;AAcA,EAAA,OAAA,EAAA;AACA;AACA,IAAA,eAFA,6BAEA;AACA,WAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,KAAA,MAAA,EAAA,CAAA,EAAA,EAAA;AACA,aAAA,SAAA,CAAA,IAAA,CAAA,EAAA;;AACA,aAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,KAAA,KAAA,EAAA,CAAA,EAAA,EAAA;AACA,eAAA,SAAA,CAAA,CAAA,EAAA,IAAA,CAAA,OAAA;AACA;AACA;;AACA,WAAA,KAAA,CAAA,cAAA,EAAA,KAAA,SAAA;AACA,KAVA;AAWA;AACA,IAAA,UAZA,sBAYA,CAZA,EAYA,CAZA,EAYA,IAZA,EAYA;AACA,aAAA,KAAA,SAAA,CAAA,CAAA,EAAA,CAAA,MAAA,IAAA;AACA,KAdA;AAeA;AACA,IAAA,MAhBA,kBAgBA,CAhBA,EAgBA,CAhBA,EAgBA;AACA,aAAA,SAAA,CAAA,QAAA,CAAA,KAAA,SAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA;AACA,KAlBA;AAmBA;AACA,IAAA,UApBA,sBAoBA,CApBA,EAoBA,CApBA,EAoBA;AACA,UAAA,MAAA,GAAA,KAAA,SAAA,CAAA,CAAA,EAAA,KAAA,CAAA,CAAA,CAAA;AACA,MAAA,MAAA,CAAA,CAAA,CAAA,GAAA,KAAA,WAAA;AACA,WAAA,IAAA,CAAA,KAAA,SAAA,EAAA,CAAA,EAAA,MAAA;AACA,WAAA,KAAA,CAAA,cAAA,EAAA,KAAA,SAAA;AACA;AAzBA;AAdA,CAAA","sourcesContent":["<template>\n  <div class=\"levelmap\">\n    <div class=\"row\" v-for=\"(row, r) in height\" v-bind:key=\"r\">\n      <div\n        class=\"col\"\n        v-for=\"(col, c) in width\"\n        v-bind:key=\"c\"\n        :class=\"{\n          floor: isTileType(r, c, 'floor') || !isTile(r, c),\n          wall: isTileType(r, c, 'wall'),\n          glass: isTileType(r, c, 'glass'),\n          goal: isTileType(r, c, 'goal'),\n        }\"\n        @click=\"updateTile(r, c)\"\n      >\n        <div\n          v-if=\"!isTile(r, c)\"\n          class=\"image\"\n          :class=\"{\n            player: isTileType(r, c, 'player'),\n            mutant: isTileType(r, c, 'mutant'),\n            bomb: isTileType(r, c, 'bomb'),\n            brick: isTileType(r, c, 'brick'),\n          }\"\n        />\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\n// TODO update with more types as they get added to the game\nconst tileTypes = [\"floor\", \"wall\", \"glass\", \"goal\"];\n\nexport default {\n  props: {\n    height: Number,\n    width: Number,\n    typeToPlace: String,\n  },\n  data() {\n    return {\n      tileTypes: [],\n    };\n  },\n  created() {\n    this.createTileTypes();\n  },\n  methods: {\n    // create the tile type array, default tiles are set to floor\n    createTileTypes() {\n      for (let r = 0; r < this.height; r++) {\n        this.tileTypes.push([]);\n        for (let c = 0; c < this.width; c++) {\n          this.tileTypes[r].push(\"floor\");\n        }\n      }\n      this.$emit(\"tile-changed\", this.tileTypes);\n    },\n    // checks if the tile at r, c is of type type\n    isTileType(r, c, type) {\n      return this.tileTypes[r][c] === type;\n    },\n    // return true if a type is a tile\n    isTile(r, c) {\n      return tileTypes.includes(this.tileTypes[r][c]);\n    },\n    // when clicked, update the tile at r, c to whatever type of tile is being placed\n    updateTile(r, c) {\n      const newRow = this.tileTypes[r].slice(0);\n      newRow[c] = this.typeToPlace;\n      this.$set(this.tileTypes, r, newRow);\n      this.$emit(\"tile-changed\", this.tileTypes);\n    },\n  },\n};\n</script>\n\n<style scoped>\n.levelmap {\n  margin-top: 1rem;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n\n.row {\n  display: flex;\n}\n\n.col {\n  height: 60px;\n  width: 60px;\n}\n\n.floor {\n  background-image: url(\"~@/assets/floor.png\");\n}\n\n.wall {\n  background-image: url(\"~@/assets/walltop.png\");\n}\n\n.glass {\n  background-image: url(\"~@/assets/glass.png\");\n}\n\n.goal {\n  background-image: url(\"~@/assets/goal.png\");\n}\n\n.image {\n  width: 60px;\n  height: 60px;\n}\n\n.player {\n  background-image: url(\"~@/assets/player.png\");\n}\n\n.mutant {\n  background-image: url(\"~@/assets/mutant.png\");\n}\n\n.brick {\n  background-image: url(\"~@/assets/brick.png\");\n}\n\n.bomb {\n  background-image: url(\"~@/assets/bomb.png\");\n}\n</style>\n"],"sourceRoot":"src/components"}]}